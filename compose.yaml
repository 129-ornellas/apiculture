services:
  db:
    image: postgres:14.5-alpine
    container_name: apiculture-db
    ports:
      - 5444:5432
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart:
      on-failure

  backend:
    image: apiculture-backend
    hostname: apiculture-backend
    container_name: apiculture-backend
    network_mode: host
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "python manage.py migrate && python manage.py runserver"
    ports:
      - 8000:8000
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/backend
    restart:
      on-failure
    
  frontend:
    image: apiculture-frontend
    hostname: apiculture-frontend
    container_name: apiculture-frontend
    network_mode: host
    build:
      context: frontend/
      dockerfile: Dockerfile
    command: npm run dev
    ports:
      - 3000:3000
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./frontend:/frontend
    restart:
      on-failure

  nginx:
    image: nginx:stable
    container_name: apiculture-nginx
    network_mode: host
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    restart:
      on-failure
  
volumes:
  postgres_data: